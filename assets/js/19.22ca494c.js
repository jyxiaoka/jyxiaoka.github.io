(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{355:function(s,t,a){"use strict";a.r(t);var e=a(0),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",[s._v("虽然在工作中我们都可能用得最多的版本管理工具是svn，但更为优秀的版本管理工具-Git我们也要了解一下，毕竟我们是对新技术、新知识都求知若渴的优秀技术人员(本人手动惭愧)，当然随时跟进学习新知识(虽然Git也不算新了)。\n"),s._v("\n下面是一些Git的初步了解和基本的日常使用，比如Git的相对于svn的一些优点，一些日常基本命令的使用等等，想学习更全面、更深入的话，可以去看看"),a("code",[s._v("《Git权威指南》")]),s._v("。")]),s._v(" "),a("h2",{attrs:{id:"git与svn的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git与svn的区别"}},[s._v("#")]),s._v(" Git与SVN的区别")]),s._v(" "),a("p",[s._v("还有一种版本控制工具-CVS，这种版本管理工具出现的比较早，当时其被大规模使用，其使用方式也简单，但是有着很多诸如难迁移、合并困难等问题，后来新的版本管理系统-SVN的出现解决CVS存在的一些问题。现在大多数公司用的比较多的应该就是SVN了，所以这里忽略CVS了，只比较SVN和Git的差异。")]),s._v(" "),a("h3",{attrs:{id:"git是分布式的，而svn不是"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git是分布式的，而svn不是"}},[s._v("#")]),s._v(" Git是分布式的，而SVN不是")]),s._v(" "),a("p",[s._v("SVN是集中式版本控制，Git是分布式版本控制，其思想是分布式、去中心化。\nGit的这个分布式特性是Git与其他如CVS、SVN等版本控制工具最核心的区别了。这个分布式体现在，比如你从中央代码版本仓库中checkout一个工程下来之后，会在本地克隆一个自己的本地版本库，这样你以后的每次commit代码都是提交到这个本地仓库中，然后再“推”到服务器版本库上。所以即使在没网的情况下，你还是可以查看版本历史记录和提交自己的代码并查看自己的提交log，或者创建分支，创建项目等等，等有网时在push到服务器上。这样的好处是不会与别人的代码产生太多的冲突，如使用SVN，你需先update，在commit，否则可能会其他成员的代码产生冲突。")]),s._v(" "),a("p",[s._v("这里想到一个问题：如果虽说不会产生太多冲突，但有时可能还是会出现，那么如果push时，服务器上的相同文件有人早一步修改提交和push了，我再push时会不会有冲突？？（需要实践一下）\n--\x3e 正常应该是会提示请先 git pull 拉起服务器最新代码吧？")]),s._v(" "),a("ol",[a("li",[s._v("如果有冲突，解决完冲突再commit，然后再push；")]),s._v(" "),a("li",[s._v("如果没有冲突，直接就可以push。")])]),s._v(" "),a("h3",{attrs:{id:"git按元数据形式存储内容，而svn按文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git按元数据形式存储内容，而svn按文件"}},[s._v("#")]),s._v(" Git按元数据形式存储内容，而SVN按文件")]),s._v(" "),a("p",[s._v("svn、CVS等会把所有文件的元信息隐藏在一个如.svn、.cvs的文件夹中，有时候我们SVN出现问题时，清空下这个文件夹，可能就会解决了。而Git中的.git目录中会保存着中央仓库中的所有的内容，如标签，分支等，是一个克隆的版本库。对比一下.svn和.git目录可以看出它们的大小差距会很大。")]),s._v(" "),a("h3",{attrs:{id:"在分支管理上的不同"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在分支管理上的不同"}},[s._v("#")]),s._v(" 在分支管理上的不同")]),s._v(" "),a("p",[s._v("使用SVN创建分支，我们一般都会在branches目录来创建一条新的分支，这条分支是在中央版本库上的。\n而Git是在本地仓库中创建分支的，我们可以任意创建多条分支，在分支上进行我们的功能开发，最后合并到主分支上，而不会和其他成员发生冲突。")]),s._v(" "),a("h3",{attrs:{id:"git没有一个全局的版本号，而svn有"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git没有一个全局的版本号，而svn有"}},[s._v("#")]),s._v(" Git没有一个全局的版本号，而SVN有")]),s._v(" "),a("p",[s._v("SVN每一次的提交都会产生一个整库的全局版本号，这个版本号是连续的，我们甚至可以预判到下一个版本号。而Git的版本号是通过提交文件的内容和目录进行计算得出一个SHA-1哈希值，用它作为每个人的提交ID，这个版本号是“全球唯一”的,不连续的，所以每个人的提交都"),a("code",[s._v("不会重复和产生版本号的冲突")]),s._v("而且还"),a("code",[s._v("保证了数据的完整性")]),s._v("，也可以依次来"),a("code",[s._v("判断数据内容是否被篡改")]),s._v("，。在提交后，这个版本号现在一般是简化后的"),a("code",[s._v("7位短版本号")]),s._v("，使用从左面开始任意长度的字串作为简化版本号，只要该简化的版本号不产生歧义。")]),s._v(" "),a("h3",{attrs:{id:"内容完整性差异"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内容完整性差异"}},[s._v("#")]),s._v(" 内容完整性差异")]),s._v(" "),a("p",[s._v("GIT的内容存储使用的是SHA-1哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。")]),s._v(" "),a("h3",{attrs:{id:"速度上的差异"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#速度上的差异"}},[s._v("#")]),s._v(" 速度上的差异")]),s._v(" "),a("p",[s._v("使用Git克隆一个项目是比使用SVN要快的。")]),s._v(" "),a("h2",{attrs:{id:"git基础命令的使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git基础命令的使用"}},[s._v("#")]),s._v(" Git基础命令的使用")]),s._v(" "),a("p",[s._v("下面是一些日常是使用的基本命令。")]),s._v(" "),a("p",[s._v("1，克隆一个仓库")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" clone https://xxxx.git 或 "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" c https://xxxx.git\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("2，在本地创建一个新的目录，并进入此目录执行如下命令")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" init\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("初始化一个repository。会在此目录下生成一个隐藏的.git目录：")]),s._v(" "),a("p",[s._v("3，设置用户名和密码(全局)")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config --global user.name "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"your name"')]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config --global user.email  “your email”\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("若省略—global，则只设置该仓库的信息。")]),s._v(" "),a("p",[s._v("4，执行如下命令将本地所有文件加入本地暂存区中：")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("5，将暂存区的文件提交到本地历史区中")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" commit -m “第一次初始化提交”\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("6，查看文件状态：")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" status\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("7，将本地仓库与远程库关联起来：")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v(" $ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" remote "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" origin git@github.com:yourName/yourRepo.git\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("8，提交到Git服务器的暂存区中：")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" push -u origin master    //第一次推送时\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" push  origin master       //第一次推送后\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h2",{attrs:{id:"错误及解决"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#错误及解决"}},[s._v("#")]),s._v(" 错误及解决")]),s._v(" "),a("p",[s._v("1）如果遇到如下错误1：\nWarning: Permanently added the RSA host key for IP address '52.74.223.119' to the list of known hosts.\nTo github.com:idev/test.git\n! [rejected]        master -> master (fetch first)\nerror: failed to push some refs to 'git@github.com:idev/test.git'\nhint: Updates were rejected because the remote contains work that you do\nhint: not have locally. This is usually caused by another repository pushing\nhint: to the same ref. You may want to first integrate the remote changes\nhint: (e.g., 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\n—> 解决办法同3")]),s._v(" "),a("p",[s._v("2）如果遇到如下错误2：\n错误提示："),a("code",[s._v("fatal: remote origin already exists.")]),s._v("\n解决办法，先将关联的远程库地址移除重新关联：")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" remote "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" origin\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("3）如果遇到如下错误3：\n! [rejected]        master -> master (non-fast-forward)\nerror: failed to push some refs to 'git@github.com:idev/test.git'\nhint: Updates were rejected because the tip of your current branch is behind\nhint: its remote counterpart. Integrate the remote changes (e.g.\nhint: 'git pull ...') before pushing again.")]),s._v(" "),a("p",[s._v("原因是本地目录中没有README.md文件，远程仓库上有，需要使用以下命令：")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" pull --rebase origin master "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#即可。 ======（重要！）=====")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("6，执行命令将服务器中的最新内容拉取到本地：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("$ git pull origin master\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("也可以使用GitHub Desktop桌面图形化工具管理。或者使用git base （windows）。")]),s._v(" "),a("p",[s._v("7，撤销尚未提交的修改")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" checkout -- 文件名\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("更多深入的Git知识可以看书籍《Git权威指南》。")]),s._v(" "),a("h2",{attrs:{id:"参考文章"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[s._v("#")]),s._v(" 参考文章")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://blog.csdn.net/bruce_6/article/details/38299677",target:"_blank",rel:"noopener noreferrer"}},[s._v("Git和SVN的区别"),a("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=n.exports}}]);