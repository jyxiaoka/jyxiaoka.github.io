(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{342:function(o,n,r){"use strict";r.r(n);var t=r(0),e=Object(t.a)({},(function(){var o=this,n=o.$createElement,r=o._self._c||n;return r("ContentSlotsDistributor",{attrs:{"slot-key":o.$parent.slotKey}},[r("p",[o._v("RunLoop是应用程序开发中的一个很重要的机制，理解它的相关概念、应用场景以及原理有助于更好的理解iOS程序的运行机制和让我们更好的利用RunLoop来编写更高效的代码。")]),o._v(" "),r("h2",{attrs:{id:"_1，什么是runloop？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1，什么是runloop？"}},[o._v("#")]),o._v(" 1，什么是RunLoop？")]),o._v(" "),r("p",[o._v("RunLoop，即运行循环，是事件接收和分发机制的实现，是线程相关基础框架中的一部分。一个RunLoop就是一个事件处理的循环(event loop)，用来不停的调度工作和处理输入事件。运行循环即在程序运行的过程中循环处理任务，使得程序一直运行，时刻等待用户的输入事件，即处理完一个任务或事件后，使得线程不会退出，让其处理watting的状态，等到有其他事件输入时再次唤醒执行，直到循环结束，函数反返回。如果没有RunLoop，程序执行完就会立即退出，比如已启动程序执行完UIApplicationMain方法后就立即退出了。")]),o._v(" "),r("h2",{attrs:{id:"_2，使用runloop的目的-作用是什么？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2，使用runloop的目的-作用是什么？"}},[o._v("#")]),o._v(" 2，使用RunLoop的目的/作用是什么？")]),o._v(" "),r("p",[o._v("苹果的官方文档里的说明，run loop的目的就是当有事件要处理时保证线程不会被终止，而没有事件处理时让线程处于休眠等待的状态。")]),o._v(" "),r("ol",[r("li",[o._v("保证程序的持续运行。当程序启动后就会自动创建一个主线程，而主线程又会马上自动创建一个它的RunLoop，这个RunLoop可以保证主线程不会被销毁，从而保证程序不会退出，持续运行。")]),o._v(" "),r("li",[o._v("处理App中的各种如触摸、定时器等事件。")]),o._v(" "),r("li",[o._v("节省CPU资源，提供程序性能。有事件需要处理时就处理，没有时就让线程进入休眠状态，这时CPU就会去处理其他事情，有输入事件时RunLoop就会立马起来响应交给对应的方法执行处理。")])]),o._v(" "),r("h2",{attrs:{id:"_3，什么时候使用runloop？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3，什么时候使用runloop？"}},[o._v("#")]),o._v(" 3，什么时候使用RunLoop？")]),o._v(" "),r("p",[o._v("当需要和线程有更多交互的时候。（Run loops are intended for situations where you want more interactivity with the thread）。\n线程和RunLoop关系：")]),o._v(" "),r("ol",[r("li",[o._v("主线程的RunLoop已经自动创建了，子线程的RunLoop需要主动创建。")]),o._v(" "),r("li",[o._v("每一个线程都有唯一一个与之对应的RunLoop对象，其保存在全局的Dictionary中，线程为key，RunLoop为value。")]),o._v(" "),r("li",[o._v("RunLoop在第一次获取时创建，在线程结束时销毁。")])]),o._v(" "),r("h2",{attrs:{id:"_4，runloop的应用场景有哪些？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4，runloop的应用场景有哪些？"}},[o._v("#")]),o._v(" 4，RunLoop的应用场景有哪些？")]),o._v(" "),r("ol",[r("li",[o._v("常驻线程（常驻内存）")]),o._v(" "),r("li",[o._v("自动释放池（AutoReleasePool）")])]),o._v(" "),r("h2",{attrs:{id:"_5，runloop对象"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5，runloop对象"}},[o._v("#")]),o._v(" 5，RunLoop对象")]),o._v(" "),r("p",[o._v("一般有两个RunLoop对象：")]),o._v(" "),r("ol",[r("li",[r("code",[o._v("NSRunLoop")]),o._v("对象，Fundation框架，基于CFRunLoopRef的封装 的面向对象的API，是不安全的")]),o._v(" "),r("li",[r("code",[o._v("CFRunLoopRe")]),o._v("f对象，CoreFoundation框架；基于C 线性安全的。")])]),o._v(" "),r("p",[o._v("获取RunLoop对象\nFoundation\n[NSRunLoopcurrentRunLoop]; // 获得当前线程的RunLoop对象\n[NSRunLoopmainRunLoop]; // 获得主线程的RunLoop对象Core\nFoundation\nCFRunLoopGetCurrent(); // 获得当前线程的RunLoop对象\nCFRunLoopGetMain(); // 获得主线程的RunLoop对象")]),o._v(" "),r("h2",{attrs:{id:"_6，runloop的运行原理？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6，runloop的运行原理？"}},[o._v("#")]),o._v(" 6，RunLoop的运行原理？")]),o._v(" "),r("p",[o._v("官方的一张RunLoop运行原理图：")]),o._v(" "),r("p",[r("img",{attrs:{src:"/images/ios-runloop.png",alt:"ios-runloop.png"}})]),o._v(" "),r("p",[o._v("说明：\n在RunLoop跑圈的过程中，通常接收两种不同类型的事件来源：")]),o._v(" "),r("ol",[r("li",[o._v("Input sources(传递异步的事件)，通常这些消息是来自其他线程或其他应用。？？？当响应这个消息时，会执行runUntilDate:方法退出RunLoop。")]),o._v(" "),r("li",[o._v("Time sources(传递同步的事件)，通常是预定时间或重复间隔。常规处理，但不会退出RunLoop。")])]),o._v(" "),r("p",[o._v("RunLoop接收到这些事件消息后就会交给相关的方法去处理。没有事件消息传入时，RunLoop就休息了。")]),o._v(" "),r("h2",{attrs:{id:"_7，项目中有何处需用到runloop？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_7，项目中有何处需用到runloop？"}},[o._v("#")]),o._v(" 7，项目中有何处需用到RunLoop？")]),o._v(" "),r("p",[o._v("有用到。就是常驻线程。\n项目中有开发收集用户的操作日志，需要在应用启动后，随时需要在某个时刻上传日志文件到服务端。")]),o._v(" "),r("h2",{attrs:{id:"_8，一些关于runloop的面试题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_8，一些关于runloop的面试题"}},[o._v("#")]),o._v(" 8，一些关于RunLoop的面试题")]),o._v(" "),r("ul",[r("li",[o._v("RunLoop和线程是什么关系？")]),o._v(" "),r("li",[o._v("NSRunLoop CFRunLoopRef的区别？")]),o._v(" "),r("li",[o._v("RunLoop中model的作用是什么？")])]),o._v(" "),r("h2",{attrs:{id:"参考文章"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[o._v("#")]),o._v(" 参考文章")]),o._v(" "),r("ol",[r("li",[r("a",{attrs:{href:"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html",target:"_blank",rel:"noopener noreferrer"}},[o._v("Threading Programming Guide"),r("OutboundLink")],1)]),o._v(" "),r("li",[r("a",{attrs:{href:"https://www.jianshu.com/p/de752066d0ad",target:"_blank",rel:"noopener noreferrer"}},[o._v("iOS底层原理总结-RunLoop"),r("OutboundLink")],1)]),o._v(" "),r("li",[r("a",{attrs:{href:"http://www.cocoachina.com/ios/20190115/26135.html",target:"_blank",rel:"noopener noreferrer"}},[o._v("iOS RunLoop 总结以及相关面试题解答"),r("OutboundLink")],1)]),o._v(" "),r("li",[r("a",{attrs:{href:"https://opensource.apple.com/tarballs/CF/",target:"_blank",rel:"noopener noreferrer"}},[o._v("RunLoopRef源码"),r("OutboundLink")],1)]),o._v(" "),r("li",[r("a",{attrs:{href:"https://blog.ibireme.com/2015/05/18/runloop/",target:"_blank",rel:"noopener noreferrer"}},[o._v("深入理解RunLoop"),r("OutboundLink")],1)])])])}),[],!1,null,null,null);n.default=e.exports}}]);