(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{346:function(e,s,a){"use strict";a.r(s);var n=a(0),r=Object(n.a)({},(function(){var e=this,s=e.$createElement,a=e._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("当我们使用苹果官方的自动布局时，会感觉到非常的繁琐。使用代码实现autolayout是往往需要写一堆又臭又长的代码，不会给人通俗易懂的感觉，即使使用IB来实现AutoLayout布局也是非常繁琐的一件事情。而第三方自动布局工具——"),a("code",[e._v("Masonry")]),e._v("是一个语法更简洁，代码更优美的轻量级的AutoLayout框架。\n")]),e._v(" "),a("h2",{attrs:{id:"masonry介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#masonry介绍"}},[e._v("#")]),e._v(" Masonry介绍")]),e._v(" "),a("p",[e._v("Masonry是一个轻量级的自动布局框架，拥有自己的描述语法，采用链式语法封装了自动布局，语法简洁，可读性好，同时还支持iOS和MacOS。Masonry的下载可从github上或者使用CocoaPods来安装,可以参考我的另一篇文章"),a("a",{attrs:{href:"http://www.iosdashen.com/ios-use-cocoapods/",target:"_blank",rel:"noopener noreferrer"}},[e._v("iOS开发-使用CocoaPods做依赖管理"),a("OutboundLink")],1),e._v("。\nMasonry源码："),a("a",{attrs:{href:"https://github.com/Masonry/Masonry",title:"Masonry源码",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/Masonry/Masonry"),a("OutboundLink")],1),e._v(" 包含了Masonry的demo。\n上一篇关于AutoLayout的文章说过，AutoLayout的核心就是"),a("code",[e._v("参照")]),e._v("和"),a("code",[e._v("约束")]),e._v("，而Masonry的添加约束的思维跟苹果的原API是相同的，其实只是对原有的API进行了封装，是的添加约束变得简洁明了，添加约束的代码更加优雅了。")]),e._v(" "),a("h2",{attrs:{id:"masonry的使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#masonry的使用"}},[e._v("#")]),e._v(" Masonry的使用")]),e._v(" "),a("p",[e._v("首先将通过GitHub下载到的Masonry拷贝到项目中，或者通过CocoaPods的"),a("code",[e._v("pod Masonry")]),e._v('将它添加到项目中，然后的要使用约束的viewController中#import "Masonry.h"，就可以使用Masonry了。下面是一个简单的例子：')]),e._v(" "),a("div",{staticClass:"language-objc line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("UIView *view = [[UIView alloc] init];\nview.backgroundColor = [UIColor greenColor];\n//需先add到父view中\n[self.view addSubview:view];\n//调用Masonry的UIView的分类方法，在block中实现约束的添加\n[view mas_makeConstraints:^(MASConstraintMaker *maker){\n\t//view的中心=父view的中心\n\tmaker.center.equalTo(self.view);\n\t//设置view的大小\n\tmaker.size.mas_equalTo(CGSizeMake(200, 180));\n}];\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br")])]),a("p",[e._v("以上是简单的实现一个view在父view中的布局。现在来实现4个view的相对布局，Masonry的语法在上面的例子中也可以看到，它容易使用，代码简洁明了易懂，不用很多代码就可以轻松实现自动布局，而且写起来很顺手。")]),e._v(" "),a("div",{staticClass:"language-objc line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("\t//首先创建4个view并添加到父view中\n\tUIView *redView = [[UIView alloc] init];\n    redView.backgroundColor = [UIColor redColor];\n    [self.view addSubview:redView];  \n    \n    UIView *greenView = [[UIView alloc] init];\n    greenView.backgroundColor = [UIColor greenColor];\n    [self.view addSubview:greenView];    \n    \n    UIView *blueView = [[UIView alloc] init];\n    blueView.backgroundColor = [UIColor blueColor];\n    [self.view addSubview:blueView];\n    \n    UIView *yellowView = [[UIView alloc] init];\n    yellowView.backgroundColor = [UIColor yellowColor];\n    [self.view addSubview:yellowView];\n    \n    //设置红色view距离父视图左边距30px 上边距100px 大小(100，80)\n    [redView mas_makeConstraints:^(MASConstraintMaker *make){\n        make.left.offset(30).with.top.offset(100);\n        make.size.mas_equalTo(CGSizeMake(100, 80));\n    }];\n    \n    //设置绿色view左边距=红view的右边距+20 Y中心店=红view的Y中心点，大小=红view\n    [greenView mas_makeConstraints:^(MASConstraintMaker *make){\n        make.left.mas_equalTo(redView.mas_right).offset(20);\n        make.centerY.mas_equalTo(redView);\n        make.size.mas_equalTo(redView);\n    }];\n    \n    //蓝view左边距=红view，上边距=红view的下边距+30，大小=红view\n    [blueView mas_makeConstraints:^(MASConstraintMaker *make){\n        make.left.mas_equalTo(redView);\n        make.top.mas_equalTo(redView.mas_bottom).offset(30);\n        make.size.mas_equalTo(redView);\n    }];\n    \n    //黄view左边距=绿view左边距，上边距=绿view上边距+30 大小=绿view\n    [yellowView mas_makeConstraints:^(MASConstraintMaker *make){\n        make.left.mas_equalTo(greenView);\n        make.top.mas_equalTo(greenView.mas_bottom).offset(30);\n        make.size.mas_equalTo(greenView);\n    }];\n\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br"),a("span",{staticClass:"line-number"},[e._v("16")]),a("br"),a("span",{staticClass:"line-number"},[e._v("17")]),a("br"),a("span",{staticClass:"line-number"},[e._v("18")]),a("br"),a("span",{staticClass:"line-number"},[e._v("19")]),a("br"),a("span",{staticClass:"line-number"},[e._v("20")]),a("br"),a("span",{staticClass:"line-number"},[e._v("21")]),a("br"),a("span",{staticClass:"line-number"},[e._v("22")]),a("br"),a("span",{staticClass:"line-number"},[e._v("23")]),a("br"),a("span",{staticClass:"line-number"},[e._v("24")]),a("br"),a("span",{staticClass:"line-number"},[e._v("25")]),a("br"),a("span",{staticClass:"line-number"},[e._v("26")]),a("br"),a("span",{staticClass:"line-number"},[e._v("27")]),a("br"),a("span",{staticClass:"line-number"},[e._v("28")]),a("br"),a("span",{staticClass:"line-number"},[e._v("29")]),a("br"),a("span",{staticClass:"line-number"},[e._v("30")]),a("br"),a("span",{staticClass:"line-number"},[e._v("31")]),a("br"),a("span",{staticClass:"line-number"},[e._v("32")]),a("br"),a("span",{staticClass:"line-number"},[e._v("33")]),a("br"),a("span",{staticClass:"line-number"},[e._v("34")]),a("br"),a("span",{staticClass:"line-number"},[e._v("35")]),a("br"),a("span",{staticClass:"line-number"},[e._v("36")]),a("br"),a("span",{staticClass:"line-number"},[e._v("37")]),a("br"),a("span",{staticClass:"line-number"},[e._v("38")]),a("br"),a("span",{staticClass:"line-number"},[e._v("39")]),a("br"),a("span",{staticClass:"line-number"},[e._v("40")]),a("br"),a("span",{staticClass:"line-number"},[e._v("41")]),a("br"),a("span",{staticClass:"line-number"},[e._v("42")]),a("br"),a("span",{staticClass:"line-number"},[e._v("43")]),a("br"),a("span",{staticClass:"line-number"},[e._v("44")]),a("br")])]),a("p",[e._v("最后呈现的就是四个整齐的方块。这里只是介绍了比较简单的布局使用，更多的是要自己去动手写，才能体会其精髓。而且Masonry是开源的，可以查看它的源代码，学习它是怎么封装的。分析并学习它的思想，有助于我们进步。")])])}),[],!1,null,null,null);s.default=r.exports}}]);