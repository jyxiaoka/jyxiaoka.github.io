(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{358:function(e,t,s){"use strict";s.r(t);var a=s(0),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("p",[e._v("最近在公司由于要负责iPhoneXS等新设备的适配，所以将Xcode升级到了Xcode10，但是运行工程遇到了一些问题，这里记录下来解决方法。")]),e._v(" "),s("p",[e._v("如果是模拟器，选择复制到iPhoneSimulator.platform的对应目录下。")]),e._v(" "),s("h2",{attrs:{id:"_1-缺少库：libstdc-6-0-9-tbd"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-缺少库：libstdc-6-0-9-tbd"}},[e._v("#")]),e._v(" 1.缺少库："),s("code",[e._v("libstdc++.6.0.9.tbd")])]),e._v(" "),s("p",[e._v("原因是在Xcode10中默认删除了这个库，如果工程中有依赖于这个库(或其他第三方库引用它)的编译时就会出错。"),s("br"),e._v("\n解决方式是在Xcode9中找到这个库，然后复制到以下路径：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/usr/lib\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("如果是模拟器，选择复制到iPhoneSimulator.platform的对应目录下。\n")]),e._v(" "),s("h2",{attrs:{id:"_2-编译成功-运行时报错"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-编译成功-运行时报错"}},[e._v("#")]),e._v(" 2.编译成功,运行时报错")]),e._v(" "),s("blockquote",[s("p",[e._v("dyld: Library not loaded: /usr/lib/libstdc++.6.dylib\nReferenced from: /Users/...\nReason: no suitable image found.  Did find:\n/usr/lib/libstdc++.6.dylib: mach-o, but not built for iOS simulatort")])]),e._v(" "),s("p",[e._v("报动态链接库装载出错，看出错提示说是 .dylib 与这个模拟器不符合。这是 Xcode10自带的iOS12模拟器的问题，所以临时的方法也是将这个相关的库从Xcode9.x中copy到Xcode10目录中，切换到iOS11的模拟器运行环境。")]),e._v(" "),s("p",[e._v("将"),s("code",[e._v("libstdc++.6.dylib")]),e._v("、 "),s("code",[e._v("libstdc++.6.0.9.dylib")]),e._v("和"),s("code",[e._v("libstdc++.dylib")]),e._v("从Xcode9.x复制到Xcode10以下目录：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/usr/lib\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[s("a",{attrs:{href:"https://stackoverflow.com/questions/50694822/xcode-10-ios-12-does-not-contain-libstdc6-0-9",target:"_blank",rel:"noopener noreferrer"}},[e._v("可参考这里的回答"),s("OutboundLink")],1)]),e._v(" "),s("h2",{attrs:{id:"_3-再次运行报错，提示找不到：-lstdc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-再次运行报错，提示找不到：-lstdc"}},[e._v("#")]),e._v(" 3.再次运行报错，提示找不到：-lstdc++")]),e._v(" "),s("p",[s("img",{attrs:{src:"/images/Xcode10_lstdc++_issue.png",alt:"报错，没找到-lstdc++"}})]),e._v(" "),s("p",[e._v("遇到这个问题也是挺憋屈的，其实不是什么代码的问题，配置也没什么错误，检查了很多地方，最后在Buildertime中第一项中，点击update工程的.project文件，然后就弹出一个窗口，选择更新即可。")]),e._v(" "),s("p",[s("img",{attrs:{src:"/images/Xcode10_performChanges.png",alt:"更新proj文件设置"}})]),e._v(" "),s("p",[e._v("其实主要是更新了.xcodeproj文件中的设置："),s("code",[e._v("target -> Build Settings -> C++ Standard Library")]),e._v(" ，然后就会变成Complier Default`，这样就使用了默认的编译器。")]),e._v(" "),s("h2",{attrs:{id:"_4-objc-msgsend方法报错"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-objc-msgsend方法报错"}},[e._v("#")]),e._v(" 4.objc_msgSend方法报错")]),e._v(" "),s("p",[s("img",{attrs:{src:"/images/Xcode10_msgSend.png",alt:"objc_msgSend方法报错"}}),e._v("\n提示：\nressViewController.m:462:17: Too many arguments to function call, expected 0, have 2")]),e._v(" "),s("p",[e._v("将下面的配置改为NO即可。\n"),s("img",{attrs:{src:"/images/Xcode10_strict_checking_objc.png",alt:"设置严格检查"}}),e._v("\n查看message.h的代码：")]),e._v(" "),s("div",{staticClass:"language-objc line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("#if !OBJC_OLD_DISPATCH_PROTOTYPES\nOBJC_EXPORT void\nobjc_msgSend(void /* id self, SEL op, ... */ )\n    OBJC_AVAILABLE(10.0, 2.0, 9.0, 1.0, 2.0);\nOBJC_EXPORT void\nobjc_msgSendSuper(void /* struct objc_super *super, SEL op, ... */ )\n    OBJC_AVAILABLE(10.0, 2.0, 9.0, 1.0, 2.0);\n#else\n\nOBJC_EXPORT id _Nullable\nobjc_msgSend(id _Nullable self, SEL _Nonnull op, ...)\n    OBJC_AVAILABLE(10.0, 2.0, 9.0, 1.0, 2.0);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br")])]),s("p",[e._v("所以如果上面配置成YES的话，就会严格检查objc_msgSend的函数调用，这就不能用第二种方法了。需要设置成NO，才能使用下面的有参数列表的函数调用。（这在以前的版本(9.3.1)中设置为YES也不会提示错误，不知道是不是Xcode10的更新导致）\n关于这个函数说明，"),s("a",{attrs:{href:"https://www.jianshu.com/p/e5aef096f967",target:"_blank",rel:"noopener noreferrer"}},[e._v("请参考这篇文章"),s("OutboundLink")],1)]),e._v(" "),s("h2",{attrs:{id:"更新了设置导致的问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#更新了设置导致的问题"}},[e._v("#")]),e._v(" 更新了设置导致的问题")]),e._v(" "),s("p",[e._v("更新了xcodeproj文件中的设置(xcode10建议更新)，将一些设置更改为YES后编译出现了一些问题，包括上面的找不到-lstdc++的问题，还有报下面的问题：")]),e._v(" "),s("p",[e._v("1050 "),s("code",[e._v("duplicate symbols for architecture x86_64")]),e._v("\n/clang👎 linker command failed with exit code 1 (use -v to see invocation)")]),e._v(" "),s("p",[e._v("这个问题很明显是存在重复的文件或重复定义了某个变量之类的，比如枚举。而其实代码中只是在不同文件中使用extern来声明了同名的变量而已，一般关闭了Xcode中的两个属性设置后是不会提示的。但是更新xcode设置时没有仔细看，导致更新打开了属性：\nBuild Setting中的Enable Testability.NO Common Blocks。两个的官方说明如下：")]),e._v(" "),s("p",[e._v("NO Common Blocks:")]),e._v(" "),s("blockquote",[s("p",[e._v("In C, allocate even uninitialized global variables in the data section of the object file, rather than generating them as common blocks. This has the effect that if the same variable is declared (without extern ) in two different compilations, you will get an error when you link them. The only reason this might be useful is if you wish to verify that the program will work on other systems which always work this way.\n主要意思是：如果开启了这个配置，当你在两个不同的编译环境中声明了相同的变量(没有使用extern关键字)时，在你链接它们的时候就会抛出一个错误。关闭后就不会。")])]),e._v(" "),s("p",[e._v("Enable Testability")]),e._v(" "),s("blockquote",[s("p",[e._v("From The Xcode 8 Release Notes:\nWhen the Enable Testability build setting is enabled, Xcode 8 will pass -export_dynamic to the linker to preserve all global symbols for testing. This effectively overrides dead code stripping, which can expose link failures from unused functions that reference undefined symbols. If necessary, disabling testability will allow the link to proceed without source changes. (27684883)\nOf course, the best thing to do is to either: a) remove the unused code that is causing the linker issues, or b) actually fix the linker issues.\n主要意思是：如果开启这个，Xcode8后就会通过链接器保存全局符号做测试，影响就是覆盖和玻璃死代码，从而能够从一些引用未声明符号函数的未使用方法暴露链接错误。")])]),e._v(" "),s("p",[e._v("所以解决方法是Build Setting设置"),s("code",[e._v("NO Common Blocks")]),e._v("为NO。")])])}),[],!1,null,null,null);t.default=n.exports}}]);